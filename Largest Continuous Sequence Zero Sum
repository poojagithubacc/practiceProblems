Find the largest continuous sequence in a array which sums to zero.

Input:  {1 ,2 ,-2 ,4 ,-4}
Output: {2 ,-2 ,4 ,-4}

Approach 1: (Brute Force) The brute force solution is calculating the sum of each and every sub-array and checking whether the sum is zero or not.
Time Complexity: O(n^2) due to the use of nested loops.
Space complexity: O(1) as no extra space is used.

Approach 2: (Hashing with Prefix Sum)If sub-array having sum is 0 means we should get two elements having the same prefix sum.
For example in the above prefix sum at index 0 sum is 1 and at index 4 sum is 1, which indicates sub-array starting from index 1 to 4 having sum is 0.

Time Complexity: O(n)
Space Complexity: O(n)

public class Solution {
    public ArrayList<Integer> lszero(ArrayList<Integer> A) {
    	Map<Integer,Integer> map=new HashMap<Integer,Integer>();
        ArrayList<Integer> result=new ArrayList<Integer>();
        int k=0,l=0,prefixSum=0;
        
        map.put(0,-1);
        for(int i=0;i<A.size();i++){
            prefixSum+=A.get(i);
            if(map.containsKey(prefixSum)){
               if(i-map.get(prefixSum)>l-k) {
            	   k=map.get(prefixSum);
	                l=i;
               }
            }else{
                map.put(prefixSum,i);
            }    
        }
        
        for(int i=k+1;i<=l;i++){
            result.add(A.get(i));
        }
        return result; 
    }
}
