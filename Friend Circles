There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. 
For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. 
And we defined a friend circle is a group of students who are direct or indirect friends.

Given a N*N matrix M representing the friend relationship between students in the class. 
If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. 
And you have to output the total number of friend circles among all the students.

Input: 
[[1,1,0],
 [1,1,0],
 [0,0,1]]
Output: 2
Explanation:The 0th and 1st students are direct friends, so they are in a friend circle. 
The 2nd student himself is in a friend circle. So return 2.


Approach 1: DFS

class Solution {
    private int rows;
    private int cols;
    private void dfs(int[][] M, int r){
        for(int idx = 0; idx < cols; idx++){
            if(M[r][idx] == 1){
                M[r][idx] = 0;
                M[idx][r] = 0;
                if(r == idx) continue;
                dfs(M, idx);
            }
        }
    }
    public int findCircleNum(int[][] M) {
        rows = M.length;
        cols = M[0].length;
        int counter = 0;
        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                if(M[r][c] == 1){
                    dfs(M, c);
                    counter++;
                }
            }
        }
        
        return counter;
    }
}


Approach 2:

class Solution {
    public int findCircleNum(int[][] M) {
        int N = M.length;
        boolean[]visited = new boolean[N];
        int count = 0;
        
        for(int i = 0; i < N ;i++){
            if(!visited[i]){
                count++;
                dfs(M,i,visited);
            }
        }
      return count;  
    }
    
    
    private void dfs(int[][]M,int i,boolean[]visited){
        for(int j = 0 ; j < M[i].length ; j++){
            if(!visited[j] && M[i][j] != 0){
                visited[j] = true;
                dfs(M,j,visited);
            }
        }
    }
    
}
