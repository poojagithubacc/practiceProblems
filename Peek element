Approach 1: (Divide and Conquer) can be used to find a peak in O(Logn) time. The idea is based on the technique of Binary Search to check if the 
middle element is the peak element or not. If the middle element is not the peak element, 
then check if the element on the right side is greater than the middle element then there is always a peak element on the right side. 
If the element on the left side is greater than the middle element then there is always a peak element on the left side. 
Form a recursion and the peak element can be found in log n time.


class Solution {
    public int findPeakUtil(int[] nums, int low, int high, int n) {
        int mid = low + (high-low)/2;
       if ((mid == 0 || nums[mid - 1] <= nums[mid]) 
           && (mid == n - 1 || nums[mid + 1] <= nums[mid])) 
            return mid; 
        else if (mid > 0 && nums[mid - 1] > nums[mid]) 
            return findPeakUtil(nums, low, (mid - 1), n);
         else
            return findPeakUtil(nums, (mid + 1), high, n);
    }
    public int findPeakElement(int[] nums) {
        return findPeakUtil(nums, 0, nums.length-1, nums.length); 
    }
}

Approach 2: (Naive approach) If in the array, the first element is greater than the second or the last element is greater than the second last, print the respective element and terminate the program.
Else traverse the array from the second index to the second last index
If for an element array[i], it is greater than both its neighbours, i.e., array[i] > array[i-1] and array[i] > array[i+1], then print that element and terminate.

int findPeak(int arr[], int n) 
{ 
    // first or last element is peak element 
    if (n == 1)  
      return arr[0]; 
    if (arr[0] >= arr[1]) 
        return 0; 
    if (arr[n - 1] >= arr[n - 2]) 
        return n - 1; 
  
    // check for every other element 
    for (int i = 1; i < n - 1; i++) { 
  
        // check if the neighbors are smaller 
        if (arr[i] >= arr[i - 1] && arr[i] >= arr[i + 1]) 
            return i; 
    } 
} 
  
// Driver Code 
int main() 
{ 
    int arr[] = { 1, 3, 20, 4, 1, 0 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    cout << "Index of a peak point is "
         << findPeak(arr, n); 
    return 0; 
} 

